
Board
  #cells
    has an attribute to store the cells of the board
  #reset!
    can reset the state of the cells in the board
    sets the cells of the board to a 9 element array of " "
  #initialize
    sets the cells of the board to a 9 element array of " "
  #display
    prints the board
  #position
    takes in user input and returns the value of the board cell
  #full?
    returns true for a full board
    returns false for an in-progress game
  #turn_count
    returns the amount of turns based on cell value
  #taken?
    returns true if the position is X or O
    returns false if the position is empty or blank
  #valid_move?
    returns true for user input between 1-9 that is not taken
  #update
    updates the cells in the board with the player token according to the input

Player
  #initialize
    accepts a token to assign
  #token
    cannot be changed once assigned in initialize

Players::Human
  inherits from Player
  #move
[]    asks the user for input and returns it

Game
  ::WIN_COMBINATIONS
    defines a constant WIN_COMBINATIONS with arrays for each win combination
  #board
    provides access to the board
  #player_1
    provides access to player_1
  #player_2
    provides access to player_2
  initialize
    accepts 2 players and a board
    defaults to two human players, X and O, with an empty board
  #current_player
    returns the correct player, X, for the third move
  #over?
    returns true for a draw
    returns true for a won game
    returns false for an in-progress game
  #won?
    returns false for a draw
    returns the correct winning combination in the case of a win
    isn't hard-coded
  #draw?
    returns true for a draw
    returns false for a won game
    returns false for an in-progress game
  #winner
    returns X when X won
    returns O when O won
    returns nil when no winner
  turn
    makes valid moves
    asks for input again after a failed validation
    changes to player 2 after the first turn
  play
    asks for players input on a turn of the game
    checks if the game is over after every turn
    plays the first turn of the game
    plays the first few turns of the game
    checks if the game is won after every turn
    checks if the game is a draw after every turn
    stops playing if someone has won
    congratulates the winner X
    congratulates the winner O
    stops playing in a draw
    prints "Cat's Game!" on a draw
    plays through an entire game

Players::Computer
  inherits from Player
  #move
[0, 1, 2, 3, 4, 5, 6, 7, 8]
    returns a valid position for the computer to move

Finished in 0.06247 seconds (files took 0.34154 seconds to load)
53 examples, 0 failures

